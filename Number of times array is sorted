Given an increasing sorted rotated array arr of distinct integers. The array is right-rotated k times. Find the value of k.
Let's suppose we have an array arr = [2, 4, 6, 9], so if we rotate it by 2 times so that it will look like this:
After 1st Rotation : [9, 2, 4, 6]
After 2nd Rotation : [6, 9, 2, 4]

Examples:

Input: arr = [5, 1, 2, 3, 4]
Output: 1
Explanation: The given array is 5 1 2 3 4. The original sorted array is 1 2 3 4 5. We can see that the array was rotated 1 times to the right.
Input: arr = [1, 2, 3, 4, 5]
Output: 0
Explanation: The given array is not rotated.
Expected Time Complexity: O(log(n))
Expected Auxiliary Space: O(1)

Constraints:
1 <= n <=105
1 <= arri <= 107
class Solution {
    public int findKRotation(List<Integer> arr) {
        // Code here
        int i=0;
        int j=arr.size()-1;
        int min=Integer.MAX_VALUE;
        if(arr.get(i)<=arr.get(j)) return 0;
        while(i<=j){
            int mid=(i+j)/2;
            if(arr.get(i)<=arr.get(mid)){
                min=Math.min(min,arr.get(i));
                i=mid+1;
            }
            else{
                min=Math.min(min,arr.get(mid));
                j=mid-1;
            }
        }
        return arr.indexOf(min);
    }
}
